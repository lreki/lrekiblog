"use strict";(self.webpackChunkblog_demo=self.webpackChunkblog_demo||[]).push([[72],{9966:(n,e,s)=>{s.r(e),s.d(e,{data:()=>a});const a={key:"v-27124a64",path:"/JavaSE/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F.html",title:"单例模式",lang:"zh-CN",frontmatter:{date:"2022/2/8 20:08",sticky:!1,keyword:"单例模式",description:"常见的单例模式",title:"单例模式",tag:["单例模式","JavaSE"]},excerpt:"",headers:[{level:2,title:"单例模式",slug:"单例模式",children:[]},{level:2,title:"饿汉单例",slug:"饿汉单例",children:[]},{level:2,title:"懒汉单例",slug:"懒汉单例",children:[]}],git:{}}},6010:(n,e,s)=>{s.r(e),s.d(e,{default:()=>i});const a=(0,s(6252).uE)('<h2 id="单例模式" tabindex="-1"><a class="header-anchor" href="#单例模式" aria-hidden="true">#</a> 单例模式</h2><p>单例模式可以保证系统中，应用该模式的这个类永远只有一个实例，即一个类永远只能创建一个对象。<br> 例如任务管理器对象我们只需要一个就可以解决问题了，这样可以节省内存空间。</p><ul><li>单例的实现方式很多 <ul><li>饿汉单例模式。</li><li>懒汉单例模式。</li><li>......</li></ul></li></ul><h2 id="饿汉单例" tabindex="-1"><a class="header-anchor" href="#饿汉单例" aria-hidden="true">#</a> 饿汉单例</h2><p>设计模式：<br> 在用类获取对象的时候，对象已经提前为你创建好了。</p><p>设计步骤：</p><ol><li>定义一个类，把构造器私有。</li><li>定义一个静态变量存储一个对象。</li></ol><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>/** a、定义一个单例类 */\npublic class SingleInstance { \n    /** c.定义一个静态变量存储一个对象即可 :属于类，与类一起加载一次 */ \n    public static SingleInstance instance = new SingleInstance ();  \n    /** b.单例必须私有构造器*/ \n    private SingleInstance (){     \n            System.out.println(&quot;创建了一个对象&quot;);    \n    }\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="懒汉单例" tabindex="-1"><a class="header-anchor" href="#懒汉单例" aria-hidden="true">#</a> 懒汉单例</h2><p>设计模式：<br> 在真正需要该对象的时候，才去创建一个对象(延迟加载对象)。 设计步骤：</p><ol><li>定义一个类，把构造器私有。</li><li>定义一个静态变量存储一个对象。</li><li>提供一个返回单例对象的方法</li></ol><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>/** 定义一个单例类 */\nclass SingleInstance2{   \n     /** 定义一个静态变量存储一个对象即可 :属于类，与类一起加载一次 */   \n    public static SingleInstanc2e instance ; // null\n          \n        private SingleInstance2(){ /** 单例必须私有构造器*/ \n\n        }   \n            \n            public static SingleInstance2 getInstance(){\n                /** 必须提供一个方法返回一个单例对象  */\n                if(instance == null)\n                    instance = new SingleInstance2();   \n            return instance;\n    }\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div>',12),l={},i=(0,s(3744).Z)(l,[["render",function(n,e){return a}]])}}]);