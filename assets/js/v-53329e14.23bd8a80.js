"use strict";(self.webpackChunkblog_demo=self.webpackChunkblog_demo||[]).push([[259],{5812:(e,i,a)=>{a.r(i),a.d(i,{data:()=>l});const l={key:"v-53329e14",path:"/JavaSE/BigDecimal()%E6%96%B9%E6%B3%95%E6%B3%A8%E6%84%8F%E7%82%B9.html",title:"BigDecimal()方法注意点",lang:"zh-CN",frontmatter:{date:"2022/2/10 20:08",sticky:!1,description:"关于BigDecimal()方法注意点",title:"BigDecimal()方法注意点",tag:["JavaSE"]},excerpt:"",headers:[{level:2,title:"关于BigDecimal()方法",slug:"关于bigdecimal-方法",children:[]}],git:{}}},3906:(e,i,a)=>{a.r(i),a.d(i,{default:()=>d});const l=(0,a(6252).uE)('<h2 id="关于bigdecimal-方法" tabindex="-1"><a class="header-anchor" href="#关于bigdecimal-方法" aria-hidden="true">#</a> 关于BigDecimal()方法</h2><h4 id="注意-禁止使用构造方法-bigdecimal-double-的方式把-double-值转化为-bigdecimal-对象" tabindex="-1"><a class="header-anchor" href="#注意-禁止使用构造方法-bigdecimal-double-的方式把-double-值转化为-bigdecimal-对象" aria-hidden="true">#</a> 注意：禁止使用构造方法 BigDecimal(double)的方式把 double 值转化为 BigDecimal 对象！</h4><p>说明：BigDecimal(double)存在精度损失风险，在精确计算或值比较的场景中可能会导致业务逻辑异常。</p><blockquote><p>如：BigDecimal g = new BigDecimal(0.1F); 实际的存储值为：0.10000000149</p></blockquote><p>正例：优先推荐入参为 String 的构造方法，或使用 BigDecimal 的 valueOf 方法，此方法内部其实执行了 Double 的 toString，而 Double 的 toString 按 double 的实际能表达的精度对尾数进行了截断。</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code> BigDecimal recommend1 = new BigDecimal(&quot;0.1&quot;); \n BigDecimal recommend2 = BigDecimal.valueOf(0.1);\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',6),c={},d=(0,a(3744).Z)(c,[["render",function(e,i){return l}]])}}]);